buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath 'biz.aQute.bnd:biz.aQute.bnd.gradle:3.0.+'
  }
}

apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'biz.aQute.bnd.builder'
apply plugin: 'eclipse-wtp'
apply plugin: 'maven'
apply plugin: 'signing'

version = '0.1.1'
group 'com.wolfninja.keystore'
ext.packaging = 'jar'

repositories {
	mavenLocal()
	mavenCentral()
}

def isDevBuild
def isCiBuild
def isReleaseBuild
def isSign
def sonatypeRepoUrl

dependencies {
	compile 'com.google.code.findbugs:jsr305:3.0.1'
	compile 'biz.aQute.bnd:biz.aQute.bnd.annotation:3.0.0'
	
	testCompile 'org.testng:testng:6.9.9'
	testCompile 'nl.jqno.equalsverifier:equalsverifier:2.0.2'
	testCompile 'org.easymock:easymock:3.4'
	testCompile 'org.powermock:powermock-module-testng:1.6.4'
	testCompile 'org.powermock:powermock-api-easymock:1.6.4'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

task getVersion << {
	println version
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

task testsJar(type: Jar, dependsOn: testClasses) {
	classifier = 'tests'
	from sourceSets.test.output
}

test.useTestNG()

check.dependsOn jacocoTestReport

artifacts {
	archives jar

	archives javadocJar
	archives sourcesJar
	archives testsJar
}

if(hasProperty("release")) {
	isReleaseBuild = true
	isSign = true
	sonatypeRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
} else if (hasProperty("ci")) {
	isCiBuild = true
	isSign = true
	version += "-SNAPSHOT"
	sonatypeRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"
} else {
	isDevBuild = true
	version += "-SNAPSHOT"
}

if(isSign) {
	signing {
		sign configurations.archives
	}
} else {
	task signArchives {
		//NOOP
	}
}

jacocoTestReport {
	reports {
		xml.enabled = true
		html.enabled = true
	}
}

uploadArchives {
	repositories {
		if(isDevBuild) {
			mavenLocal()
		} else {
			mavenDeployer {
				if(isSign) {
					beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
				}

				repository(url: sonatypeRepoUrl) {
					authentication(userName: sonatypeUsername, password: sonatypePassword)
				}

				pom.project {
					name 'KeyStore'
					packaging 'jar'
					description 'an abstraction library for key value stores'
					url 'http://github.com/wolfninja/keystore'

					scm {
						url 'scm:git@github.com:wolfninja/KeyStore.git'
						connection 'scm:git@github.com:wolfninja/KeyStore.git'
						developerConnection 'scm:git@github.com:wolfninja/KeyStore.git'
					}

					licenses {
						license {
							name 'MIT License'
							url 'http://opensource.org/licenses/MIT'
							distribution 'repo'
						}
					}

					developers {
						developer {
							id 'nickball'
							name 'Nick Ball'
						}
					}
				}
			}
		}
	}
}
